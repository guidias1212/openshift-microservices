{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/guilherme/Public/RedHat/openshift-microservices/frontend/components/NotesList.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar axios = require('axios');\n\nvar getNotesFromServer = function getNotesFromServer() {\n  axios.get('http://gateway-sandbox.apps.ca-central-1.starter.openshift-online.com/gateway/getNotes').then(function (response) {\n    var note;\n\n    var _iterator = _createForOfIteratorHelper(response.data.notes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        note = _step.value;\n        console.log(note);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  })[\"catch\"](function (error) {\n    console.log(error);\n  });\n};\n\nvar NotesList = function NotesList() {\n  return __jsx(React.Fragment, null, getNotesFromServer(), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, \"This is a note\"), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"This is another note\"), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }));\n};\n\n_c = NotesList;\nexport default NotesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotesList\");","map":{"version":3,"sources":["/home/guilherme/Public/RedHat/openshift-microservices/frontend/components/NotesList.js"],"names":["axios","require","getNotesFromServer","get","then","response","note","data","notes","console","log","error","NotesList"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC7BF,EAAAA,KAAK,CAACG,GAAN,CAAU,wFAAV,EACCC,IADD,CACM,UAAAC,QAAQ,EAAI;AACd,QAAIC,IAAJ;;AADc,+CAEDD,QAAQ,CAACE,IAAT,CAAcC,KAFb;AAAA;;AAAA;AAEd,0DAAkC;AAA7BF,QAAAA,IAA6B;AAC9BG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACH;AAJa;AAAA;AAAA;AAAA;AAAA;AAKjB,GAND,WAOO,UAAAK,KAAK,EAAI;AACZF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH,GATD;AAUH,CAXD;;AAcA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,SACI,4BACCV,kBAAkB,EADnB,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALA,CADJ;AASD,CAVH;;KAAMU,S;AAYJ,eAAeA,SAAf","sourcesContent":["const axios = require('axios');\n\nconst getNotesFromServer = () => {\n    axios.get('http://gateway-sandbox.apps.ca-central-1.starter.openshift-online.com/gateway/getNotes')\n    .then(response => {\n        var note;\n        for (note of response.data.notes) {\n            console.log(note);\n        }\n    })\n    .catch(error => {\n        console.log(error);\n    })\n}\n\n\nconst NotesList = () => {\n    return (\n        <>\n        {getNotesFromServer()}\n        <p>This is a note</p>\n        <br/>\n        <p>This is another note</p>\n        <br/>\n        </>\n    )\n  }\n  \n  export default NotesList\n"]},"metadata":{},"sourceType":"module"}