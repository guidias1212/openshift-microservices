{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/guilherme/Public/RedHat/openshift-microservices/frontend/components/NotesList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar callAPI = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get('http://gateway-sandbox.apps.ca-central-1.starter.openshift-online.com/gateway/getNotes');\n\n          case 2:\n            response = _context.sent;\n            setText(response.data.notes);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function callAPI() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar NotesList = function NotesList(props) {\n  _s();\n\n  var _useState = useState([\"Loading notes from server...\"]),\n      getText = _useState[0],\n      setText = _useState[1];\n\n  if (props) {\n    useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              callAPI();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })), []);\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, getText.map(function (notes, index) {\n    return __jsx(\"div\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 25\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 29\n      }\n    }, notes));\n  }));\n};\n\n_s(NotesList, \"M1GRo3JZmpPjp0QcHWhX4jLjbjc=\");\n\n_c = NotesList;\nexport default NotesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotesList\");","map":{"version":3,"sources":["/home/guilherme/Public/RedHat/openshift-microservices/frontend/components/NotesList.js"],"names":["useState","useEffect","axios","callAPI","get","response","setText","data","notes","NotesList","props","getText","map","index"],"mappings":";;;;;;;;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,OAAO;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACWD,KAAK,CAACE,GAAN,CAAU,wFAAV,CADX;;AAAA;AACNC,YAAAA,QADM;AAERC,YAAAA,OAAO,CAACD,QAAQ,CAACE,IAAT,CAAcC,KAAf,CAAP;;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPL,OAAO;AAAA;AAAA;AAAA,GAAb;;AAKA,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAAA;;AAAA,kBACEV,QAAQ,CAAC,CAAC,8BAAD,CAAD,CADV;AAAA,MAClBW,OADkB;AAAA,MACTL,OADS;;AAGzB,MAAII,KAAJ,EAAW;AACPT,IAAAA,SAAS,wEAAC;AAAA;AAAA;AAAA;AAAA;AACNE,cAAAA,OAAO;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,IAEN,EAFM,CAAT;AAGH;;AAED,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQQ,OAAO,CAACC,GAAR,CAAY,UAACJ,KAAD,EAAQK,KAAR,EAAkB;AAC1B,WACI;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIL,KAAJ,CADJ,CADJ;AAKH,GAND,CAFR,CADJ;AAaD,CAtBH;;GAAMC,S;;KAAAA,S;AAwBJ,eAAeA,SAAf","sourcesContent":["import {useState, useEffect} from 'react'\nimport axios from 'axios'\n\nconst callAPI = async () => {\n    const response = await axios.get('http://gateway-sandbox.apps.ca-central-1.starter.openshift-online.com/gateway/getNotes');\n        setText(response.data.notes);\n}\n\nconst NotesList = (props) => {\n    const [getText, setText] = useState([\"Loading notes from server...\"]);\n    \n    if (props) {\n        useEffect(async () => {\n            callAPI();\n        }, [])\n    }\n\n    return (\n        <div>\n            {\n                getText.map((notes, index) => {\n                    return (\n                        <div key={index}>\n                            <p>{notes}</p>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n  }\n  \n  export default NotesList\n"]},"metadata":{},"sourceType":"module"}