{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/Public/RedHat/openshift-microservices/frontend/components/NotesList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar axios = require('axios');\n\nvar getNotesFromServer = function getNotesFromServer() {\n  return new Promise(function (resolve, reject) {\n    var _this = this;\n\n    var notesList;\n    axios.get('http://gateway-sandbox.apps.ca-central-1.starter.openshift-online.com/gateway/getNotes').then(function (response) {\n      console.log(response.data.notes[0]);\n      var note;\n\n      var _iterator = _createForOfIteratorHelper(response.data.notes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          note = _step.value;\n          notesList += __jsx(\"div\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 11,\n              columnNumber: 34\n            }\n          }, __jsx(\"p\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 11,\n              columnNumber: 39\n            }\n          }, \"note\"), __jsx(\"br\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 11,\n              columnNumber: 50\n            }\n          }));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      resolve(notesList);\n    })[\"catch\"](function (error) {\n      console.log(error);\n      reject(error);\n    });\n  });\n};\n\nvar NotesList = function NotesList() {\n  // return getNotesFromServer(\n  return \"ok\";\n};\n\n_c = NotesList;\nexport default NotesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotesList\");","map":{"version":3,"sources":["/home/guilherme/Public/RedHat/openshift-microservices/frontend/components/NotesList.js"],"names":["axios","require","getNotesFromServer","Promise","resolve","reject","notesList","get","then","response","console","log","data","notes","note","error","NotesList"],"mappings":";;;;;;;;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAAA;;AACtC,QAAIC,SAAJ;AACAN,IAAAA,KAAK,CAACO,GAAN,CAAU,wFAAV,EACCC,IADD,CACM,UAAAC,QAAQ,EAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoB,CAApB,CAAZ;AACA,UAAIC,IAAJ;;AAFc,iDAGDL,QAAQ,CAACG,IAAT,CAAcC,KAHb;AAAA;;AAAA;AAGd,4DAAkC;AAA7BC,UAAAA,IAA6B;AAC9BR,UAAAA,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAL,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAhB,CAAb;AACH;AALa;AAAA;AAAA;AAAA;AAAA;;AAMdF,MAAAA,OAAO,CAACE,SAAD,CAAP;AACH,KARD,WASO,UAAAS,KAAK,EAAI;AACZL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACAV,MAAAA,MAAM,CAACU,KAAD,CAAN;AACH,KAZD;AAaH,GAfE,CAAP;AAiBH,CAlBD;;AAoBA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB;AACA,SAAO,IAAP;AACD,CAHH;;KAAMA,S;AAKJ,eAAeA,SAAf","sourcesContent":["const axios = require('axios');\n\nconst getNotesFromServer = () => {\n    return new Promise(function (resolve, reject) {\n            var notesList;\n            axios.get('http://gateway-sandbox.apps.ca-central-1.starter.openshift-online.com/gateway/getNotes')\n            .then(response => {\n                console.log(response.data.notes[0]);\n                var note;\n                for (note of response.data.notes) {\n                    notesList += <div><p>note</p><br/></div>;\n                }\n                resolve(notesList);\n            })\n            .catch(error => {\n                console.log(error);\n                reject(error);\n            })\n        }\n    )\n}\n\nconst NotesList = () => {\n    // return getNotesFromServer(\n    return \"ok\"\n  }\n  \n  export default NotesList\n"]},"metadata":{},"sourceType":"module"}