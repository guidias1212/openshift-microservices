{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/guilherme/Public/RedHat/openshift-microservices/frontend/components/NotesList.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar NotesList = function NotesList() {\n  _s();\n\n  var _useState = useState([\"Loading notes from server...\"]),\n      getText = _useState[0],\n      setText = _useState[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get('http://gateway-sandbox.apps.ca-central-1.starter.openshift-online.com/gateway/getNotes');\n\n          case 2:\n            response = _context.sent;\n            setText(response.data.notes);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, getText.map(function (notes, index) {\n    return __jsx(\"div\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 25\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 29\n      }\n    }, notes));\n  }));\n};\n\n_s(NotesList, \"M1GRo3JZmpPjp0QcHWhX4jLjbjc=\");\n\n_c = NotesList;\nexport function updateNotes() {\n  _s2();\n\n  var _useState2 = useState(0),\n      setTick = _useState2[1];\n\n  var update = useEffect(function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  }, []);\n  return update;\n}\n\n_s2(updateNotes, \"hixXY3qtDYbcaOIQHEqyerJP+5w=\");\n\nexport default NotesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotesList\");","map":{"version":3,"sources":["/home/guilherme/Public/RedHat/openshift-microservices/frontend/components/NotesList.js"],"names":["useState","useEffect","axios","NotesList","getText","setText","get","response","data","notes","map","index","updateNotes","setTick","update","tick"],"mappings":";;;;;;;;;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA,kBACOH,QAAQ,CAAC,CAAC,8BAAD,CAAD,CADf;AAAA,MACbI,OADa;AAAA,MACJC,OADI;;AAIpBJ,EAAAA,SAAS,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBC,KAAK,CAACI,GAAN,CAAU,wFAAV,CADjB;;AAAA;AACAC,YAAAA,QADA;AAENF,YAAAA,OAAO,CAACE,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAP;;AAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAGN,EAHM,CAAT;AAKA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQL,OAAO,CAACM,GAAR,CAAY,UAACD,KAAD,EAAQE,KAAR,EAAkB;AAC1B,WACI;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,KAAJ,CADJ,CADJ;AAKH,GAND,CAFR,CADJ;AAaD,CAtBH;;GAAMN,S;;KAAAA,S;AAwBJ,OAAO,SAASS,WAAT,GAAuB;AAAA;;AAAA,mBACRZ,QAAQ,CAAC,CAAD,CADA;AAAA,MACnBa,OADmB;;AAE5B,MAAMC,MAAM,GAAGb,SAAS,CAAC,YAAM;AAC7BY,IAAAA,OAAO,CAAC,UAAAE,IAAI;AAAA,aAAIA,IAAI,GAAG,CAAX;AAAA,KAAL,CAAP;AACD,GAFuB,EAErB,EAFqB,CAAxB;AAGA,SAAOD,MAAP;AACD;;IANeF,W;;AAQhB,eAAeT,SAAf","sourcesContent":["import {useState, useEffect} from 'react'\nimport axios from 'axios'\n\nconst NotesList = () => {\n    const [getText, setText] = useState([\"Loading notes from server...\"])\n    \n\n    useEffect(async () => {\n        const response = await axios.get('http://gateway-sandbox.apps.ca-central-1.starter.openshift-online.com/gateway/getNotes');\n        setText(response.data.notes);\n    }, [])\n\n    return (\n        <div>\n            {\n                getText.map((notes, index) => {\n                    return (\n                        <div key={index}>\n                            <p>{notes}</p>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n  }\n  \n  export function updateNotes() {\n    const [, setTick] = useState(0);\n    const update = useEffect(() => {\n      setTick(tick => tick + 1);\n    }, [])\n    return update;\n  }\n\n  export default NotesList\n"]},"metadata":{},"sourceType":"module"}